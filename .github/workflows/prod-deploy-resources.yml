name: Prod - Deploy Databricks Resources

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag to deploy'
        required: true
        type: string
      deploy_ui:
        description: 'Force deploy UI app'
        required: false
        default: false
        type: boolean
  release:
    types: [published]

jobs:
  deploy:
    name: Deploy to Production
    environment: prod
    runs-on:
      group: databricks-field-eng-protected-runner-group
      labels: linux-ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name || github.event.inputs.release_tag }}
          fetch-depth: 0

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10" 

      - name: Install dependencies
        run: |
          pip install requests          
          
      - name: Validate Prerequisites
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Validating deployment prerequisites..."
          
          # Validate release tag format
          RELEASE_TAG="${{ github.event.release.tag_name || github.event.inputs.release_tag }}"
          if [[ ! "$RELEASE_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid release tag format: $RELEASE_TAG"
            echo "Release tags must follow semantic versioning (e.g., v1.2.3)"
            exit 1
          fi
          echo "✅ Release tag format validated: $RELEASE_TAG"
          
          # Verify tag exists and get its commit
          TAG_COMMIT=$(git rev-list -n 1 "$RELEASE_TAG" 2>/dev/null || echo "")
          if [[ -z "$TAG_COMMIT" ]]; then
            echo "❌ Release tag $RELEASE_TAG not found"
            exit 1
          fi
          
          # Check if tag is on main branch
          if ! git branch -r --contains "$TAG_COMMIT" | grep -q "origin/main"; then
            echo "❌ Release tag $RELEASE_TAG is not on the main branch"
            echo "Production releases must be created from the main branch"
            exit 1
          fi
          echo "✅ Release tag is on main branch"
          
          echo "✅ All prerequisites validated successfully"
          
      - uses: databricks/setup-cli@main

      - name: Validate Bundle for Prod
        id: validate
        env:
          DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_CLIENT_ID }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_CLIENT_SECRET }}
        run: |
          echo "Validating bundle configuration..."
          databricks bundle validate -t prod

      - name: Deploy Bundle to Prod
        id: deploy
        env:
          DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_CLIENT_ID }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_CLIENT_SECRET }}
        run: |
          echo "Deploying to production environment..."
          databricks bundle deploy -t prod
          echo "Bundle deployed successfully"

      - name: Deploy MCP Server
        env:
          DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_CLIENT_ID }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_CLIENT_SECRET }}
        run: |
          echo "Deploying MCP server..."
          databricks bundle run mcp_server_outage_info -t prod          

      - name: Check for UI Changes
        id: ui-changes
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -E '^(telco_support_agent/ui/|resources/ui/customer_support_app\.yml)'; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Deploy UI App
        if: ${{ github.event.inputs.deploy_ui == 'true' || steps.ui-changes.outputs.changed == 'true' }}
        env:
          DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_CLIENT_ID }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_CLIENT_SECRET }}
        run: |
          echo "Deploying UI app..."
          databricks bundle run customer_support_ui -t prod

      - name: Post Deployment Summary
        if: always()
        run: |
          echo "## Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Tag**: ${{ github.event.release.tag_name || github.event.inputs.release_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **UI Changes**: ${{ steps.ui-changes.outputs.changed == 'true' && 'Detected' || 'None' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Force UI Deploy**: ${{ github.event.inputs.deploy_ui == 'true' && 'Yes' || 'No' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **UI Deployed**: ${{ (github.event.inputs.deploy_ui == 'true' || steps.ui-changes.outputs.changed == 'true') && 'Yes' || 'No' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 Production deployment completed." >> $GITHUB_STEP_SUMMARY